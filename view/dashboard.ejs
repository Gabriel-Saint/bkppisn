<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SGF-tst</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="http://localhost:3000/style.css">
    <link rel="icon" href="http://localhost:3000/sao-patricio.ico" type="image/x-icon">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" />
    <style>
        h4{
            text-align: center;
           
        }
        .container.mt-4{
                margin-bottom: 3.125rem;
            }

        .nav {
            display: flex;
            justify-content: space-between; 
        }

        .nav-left, .nav-right {
            display: flex;
            gap: 10px; 
        }

        .nav-left button, .nav-right button {
            display: flex;
            align-items: center;
        }

        .nav-left a, .nav-right a {
            text-decoration: none;
            color: #fff; /
        }
    </style>
</head>

<body>

    <div class="container first">
        <h1>Dashboard Financeiro</h1>
        <nav class="nav">
            <div class="nav-left">
                <button type="button" class="btn btn-primary btn-session">
                    <a href="http://localhost:3000/home" class="text-white">Home</a>
                </button>
                <button id="generatePDF" class="btn btn-primary">Exportar Dashboard para PDF</button>
            </div>
            <div class="nav-right">
                <button type="button" class="btn btn-primary btn-session">
                    <a href="http://localhost:3000/logout" class="text-white">Sair</a>
                </button>
            </div>
        </nav>        
    </div>

    <div class="container mt-4">
        <div class="row">
            <div class="col-md-6">
                <h4>Gráfico de Entradas </h4>
                <canvas id="barChartIncome" width="500" height="250"></canvas> 
            </div>
            <div class="col-md-6">
                <h4>Gráfico de Saídas </h4>
                <canvas id="barChartExpenses" width="500" height="250"></canvas> 
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-md-6">
                <h4>Distribuição de Entradas por Categoria</h4>
                <canvas id="incomePieChart" width="250" height="250"></canvas> 
            </div>
            <div class="col-md-6">
                <h4>Distribuição de Saídas por Categoria</h4>
                <canvas id="expensesPieChart" width="250" height="250"></canvas>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-md-6">
                <h4>Gráfico de Entradas </h4>
                <canvas id="lineChartIncome" width="500" height="250"></canvas> 
            </div>
            <div class="col-md-6">
                <h4>Gráfico de Saídas </h4>
                <canvas id="lineChartExpenses" width="500" height="250"></canvas> 
            </div>
        </div>
    </div>
    
    

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      async function fetchData() {
    try {
        const response = await fetch('/buscar-dados');
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Erro ao buscar dados:', error);
    }
}

function separateData(data) {
    const income = data.filter(item => item.type_record === 1);
    const expenses = data.filter(item => item.type_record === 0);
    return { income, expenses };
}

function createBarChartIncome(data) {
    const { income } = separateData(data);
    const ctx = document.getElementById('barChartIncome').getContext('2d');
    const chartData = {
        labels: income.map(item => item.name_category),
        datasets: [{
            label: 'Entradas',
            data: income.map(item => item.value_record),
            backgroundColor: 'rgb(54, 162, 235)',
            borderColor: 'rgb(54, 162, 235)',
            borderWidth: 1
        }]
    };
    new Chart(ctx, { type: 'bar', data: chartData });
}

function createBarChartExpenses(data) {
    const { expenses } = separateData(data);
    const ctx = document.getElementById('barChartExpenses').getContext('2d');
    const chartData = {
        labels: expenses.map(item => item.name_category),
        datasets: [{
            label: 'Saídas',
            data: expenses.map(item => item.value_record),
            backgroundColor: 'rgb(255, 99, 132)',
            borderColor: 'rgb(255, 99, 132)',
            borderWidth: 1
        }]
    };
    new Chart(ctx, { type: 'bar', data: chartData });
}

function createLineChartIncome(data) {
    const { income } = separateData(data);
    const ctx = document.getElementById('lineChartIncome').getContext('2d');
    const chartData = {
        labels: income.map(item => item.date_record),
        datasets: [{
            label: 'Entradas',
            data: income.map(item => item.value_record),
            fill: false,
            borderColor: 'rgb(54, 162, 235)',
            tension: 0.1
        }]
    };
    new Chart(ctx, { type: 'line', data: chartData });
}

function createLineChartExpenses(data) {
    const { expenses } = separateData(data);
    const ctx = document.getElementById('lineChartExpenses').getContext('2d');
    const chartData = {
        labels: expenses.map(item => item.date_record),
        datasets: [{
            label: 'Saídas',
            data: expenses.map(item => item.value_record),
            fill: false,
            borderColor: 'rgb(255, 99, 132)',
            tension: 0.1
        }]
    };
    new Chart(ctx, { type: 'line', data: chartData });
}

function createIncomePieChart(data) {
    const { income } = separateData(data);
    const ctx = document.getElementById('incomePieChart').getContext('2d');
    const chartData = {
        labels: income.map(item => item.name_category),
        datasets: [{
            label: 'Entradas por Categoria',
            data: income.map(item => item.value_record),
            backgroundColor: ['rgb(54, 162, 235)', 'rgb(75, 192, 192)', 'rgb(255, 206, 86)', 'rgb(255, 159, 64)', 'rgb(153, 102, 255)'],
            borderWidth: 1
        }]
    };
    new Chart(ctx, { type: 'pie', data: chartData });
}

function createExpensesPieChart(data) {
    const { expenses } = separateData(data);
    const ctx = document.getElementById('expensesPieChart').getContext('2d');
    const chartData = {
        labels: expenses.map(item => item.name_category),
        datasets: [{
            label: 'Saídas por Categoria',
            data: expenses.map(item => item.value_record),
            backgroundColor: ['rgb(255, 99, 132)', 'rgb(75, 192, 192)', 'rgb(255, 206, 86)', 'rgb(54, 162, 235)', 'rgb(153, 102, 255)'],
            borderWidth: 1
        }]
    };
    new Chart(ctx, { type: 'pie', data: chartData });
}

async function renderCharts() {
    const data = await fetchData();
    if (data) {
        createBarChartIncome(data);
        createBarChartExpenses(data);
        createIncomePieChart(data);
        createExpensesPieChart(data);
        createLineChartIncome(data);
        createLineChartExpenses(data);
    }
}

renderCharts();


    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
    <script>
    document.getElementById('generatePDF').addEventListener('click', async function () {
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF();

    pdf.setFontSize(18);
    pdf.text('Relatório Financeiro', 14, 20);

    const convertChartToImage = (chartId) => {
        const chartElement = document.getElementById(chartId);
        if (chartElement) {
            return chartElement.toDataURL('image/png');
        } else {
            console.warn(`Gráfico com ID "${chartId}" não encontrado.`);
            return null;
        }
    };

    pdf.text('Tabela de Entradas e Saídas', 14, 40);

    const data = await fetchData();
    const tableData = data.map(item => [
        item.date_record,
        item.name_category,
        item.value_record,
        item.type_record === 1 ? 'Entrada' : 'Saída'
    ]);

    pdf.autoTable({
        head: [['Data', 'Categoria', 'Valor', 'Tipo']],
        body: tableData,
        startY: 50 
    });

    const barChartIncomeImage = convertChartToImage('barChartIncome');
    const barChartExpensesImage = convertChartToImage('barChartExpenses');
    const lineChartIncomeImage = convertChartToImage('lineChartIncome');
    const lineChartExpensesImage = convertChartToImage('lineChartExpenses');
    const incomePieChartImage = convertChartToImage('incomePieChart');
    const expensesPieChartImage = convertChartToImage('expensesPieChart');

    let lastY = pdf.previousAutoTable.finalY + 30; 

    if (barChartIncomeImage) {
        pdf.setFontSize(12);
        pdf.text('Gráfico de Entradas (Barras)', 14, lastY);
        pdf.addImage(barChartIncomeImage, 'PNG', 14, lastY + 10, 150, 60); 
        lastY += 80;
    }

    if (barChartExpensesImage) {
        pdf.text('Gráfico de Saídas (Barras)', 14, lastY);
        pdf.addImage(barChartExpensesImage, 'PNG', 14, lastY + 10, 150, 60);
        lastY += 80;
    }

  
    if (lineChartIncomeImage) {
        pdf.addPage();
        lastY = 30;
        pdf.text('Gráfico de Entradas (Linhas)', 14, lastY);
        pdf.addImage(lineChartIncomeImage, 'PNG', 14, lastY + 10, 150, 60);
        lastY += 80;
    }

    if (lineChartExpensesImage) {
        pdf.text('Gráfico de Saídas (Linhas)', 14, lastY);
        pdf.addImage(lineChartExpensesImage, 'PNG', 14, lastY + 10, 150, 60);
        lastY += 80;
    }

    pdf.addPage();
    if (incomePieChartImage) {
        pdf.setFontSize(12);
        pdf.text('Distribuição de Entradas por Categoria (Pizza)', 14, 20);
        pdf.addImage(incomePieChartImage, 'PNG', 14, 30, 80, 80);
    }

    if (expensesPieChartImage) {
        pdf.text('Distribuição de Saídas por Categoria (Pizza)', 105, 20);
        pdf.addImage(expensesPieChartImage, 'PNG', 105, 30, 80, 80);
    }

    pdf.save('Dashboard_Financeiro.pdf');
});

</script>

</body>
</html>
